{"ast":null,"code":"var _jsxFileName = \"/home/kali/mi-primer-startup/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\n// Crear el contexto de autenticación\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Proveedor del contexto\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  // Función para verificar si el token es válido\n  const isAuthenticated = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      const decoded = jwtDecode(token);\n      return decoded.exp * 1000 > Date.now();\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // Función para verificar el estado de autenticación\n  const checkAuthStatus = () => {\n    const token = localStorage.getItem('token');\n    const authenticated = isAuthenticated();\n    setIsLoggedIn(authenticated);\n    if (authenticated && token) {\n      try {\n        const decoded = jwtDecode(token);\n        setUser({\n          id: decoded.user_id,\n          email: decoded.email\n        });\n      } catch (e) {\n        console.error(\"Error decoding token:\", e);\n      }\n    } else {\n      setUser(null);\n    }\n    setLoading(false);\n  };\n\n  // Función para iniciar sesión\n  const login = token => {\n    localStorage.setItem('token', token);\n    window.dispatchEvent(new Event('loginSuccess'));\n    checkAuthStatus(); // Actualizar estado inmediatamente\n  };\n\n  // Función para cerrar sesión\n  const logout = () => {\n    localStorage.removeItem('token');\n    window.dispatchEvent(new Event('logoutSuccess'));\n    checkAuthStatus(); // Actualizar estado inmediatamente\n  };\n  useEffect(() => {\n    // Verificar estado de autenticación al montar el componente\n    checkAuthStatus();\n\n    // Escuchar eventos de almacenamiento (para sincronizar entre pestañas)\n    const handleStorageChange = e => {\n      if (e.key === 'token') {\n        checkAuthStatus();\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('loginSuccess', checkAuthStatus);\n    window.addEventListener('logoutSuccess', checkAuthStatus);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('loginSuccess', checkAuthStatus);\n      window.removeEventListener('logoutSuccess', checkAuthStatus);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      loading,\n      user,\n      login,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para usar el contexto de autenticación\n_s(AuthProvider, \"z0P5v7OGUZux64U+7dyJomBb8EQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","loading","setLoading","user","setUser","isAuthenticated","token","localStorage","getItem","decoded","exp","Date","now","e","checkAuthStatus","authenticated","id","user_id","email","console","error","login","setItem","window","dispatchEvent","Event","logout","removeItem","handleStorageChange","key","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/kali/mi-primer-startup/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\n// Crear el contexto de autenticación\nconst AuthContext = createContext(null);\n\n// Proveedor del contexto\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  // Función para verificar si el token es válido\n  const isAuthenticated = () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    \n    try {\n      const decoded = jwtDecode(token);\n      return decoded.exp * 1000 > Date.now();\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // Función para verificar el estado de autenticación\n  const checkAuthStatus = () => {\n    const token = localStorage.getItem('token');\n    const authenticated = isAuthenticated();\n    \n    setIsLoggedIn(authenticated);\n    \n    if (authenticated && token) {\n      try {\n        const decoded = jwtDecode(token);\n        setUser({\n          id: decoded.user_id,\n          email: decoded.email\n        });\n      } catch (e) {\n        console.error(\"Error decoding token:\", e);\n      }\n    } else {\n      setUser(null);\n    }\n    \n    setLoading(false);\n  };\n\n  // Función para iniciar sesión\n  const login = (token) => {\n    localStorage.setItem('token', token);\n    window.dispatchEvent(new Event('loginSuccess'));\n    checkAuthStatus(); // Actualizar estado inmediatamente\n  };\n\n  // Función para cerrar sesión\n  const logout = () => {\n    localStorage.removeItem('token');\n    window.dispatchEvent(new Event('logoutSuccess'));\n    checkAuthStatus(); // Actualizar estado inmediatamente\n  };\n\n  useEffect(() => {\n    // Verificar estado de autenticación al montar el componente\n    checkAuthStatus();\n\n    // Escuchar eventos de almacenamiento (para sincronizar entre pestañas)\n    const handleStorageChange = (e) => {\n      if (e.key === 'token') {\n        checkAuthStatus();\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('loginSuccess', checkAuthStatus);\n    window.addEventListener('logoutSuccess', checkAuthStatus);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('loginSuccess', checkAuthStatus);\n      window.removeEventListener('logoutSuccess', checkAuthStatus);\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ \n      isLoggedIn, \n      loading, \n      user,\n      login, \n      logout,\n      isAuthenticated\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook personalizado para usar el contexto de autenticación\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}